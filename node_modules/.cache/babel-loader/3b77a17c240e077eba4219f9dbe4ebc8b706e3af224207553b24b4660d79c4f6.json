{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikic\\\\Desktop\\\\GrindBro\\\\frontend\\\\src\\\\Components\\\\DisplayPlan.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"../styles/DisplayPlan.css\";\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayPlan() {\n  _s();\n  const d = new Date();\n  const [year, setYear] = useState(d.getFullYear());\n  const [month, setMonth] = useState(d.toLocaleString('en-US', {\n    month: 'long',\n    lang: \"eng\"\n  }));\n  const [day, setDate] = useState(d.getDate());\n  const [monthWeekDays, changeMonthWeekDays] = useState([]);\n  const [rowsNum, changeRowsNum] = useState(1);\n  const [table, changeTable] = useState();\n  const createTable = rows => {\n    const arr = [...Array(rows - 1).keys()];\n    console.log(arr);\n    const Table = arr.map(index => {\n      /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this);\n    });\n    return Table;\n  };\n  useEffect(() => {\n    var numOfRows = 1;\n    var lastDay = new Date(year, d.getMonth() + 1, 0).getDate();\n    for (var i = 1; i <= lastDay; i++) {\n      const w = new Date(year, d.getMonth(), i);\n      console.log(w.getDay());\n      if (w.getDay() === 0) {\n        numOfRows = numOfRows + 1;\n      }\n      changeRowsNum(numOfRows);\n    }\n    changeTable(createTable(numOfRows));\n  }, []);\n\n  // Stwórz dynamicznie tabele\n  // const arr = new Array(rowsNum)\n  // const Table = (\n  //   arr.map((index) => {\n  //     <tr><td>index</td></tr>\n  //   })\n\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DisplayPlan\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monthTitle\",\n        children: month[0].toUpperCase() + month.slice(1) + \" \" + year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monthCallendar\",\n        children: rowsNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(DisplayPlan, \"4/kL00t9OFE5gT6etQZ4SE0uNy4=\");\n_c = DisplayPlan;\nvar _c;\n$RefreshReg$(_c, \"DisplayPlan\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DisplayPlan","_s","d","Date","year","setYear","getFullYear","month","setMonth","toLocaleString","lang","day","setDate","getDate","monthWeekDays","changeMonthWeekDays","rowsNum","changeRowsNum","table","changeTable","createTable","rows","arr","Array","keys","console","log","Table","map","index","children","fileName","_jsxFileName","lineNumber","columnNumber","numOfRows","lastDay","getMonth","i","w","getDay","className","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/mikic/Desktop/GrindBro/frontend/src/Components/DisplayPlan.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport \"../styles/DisplayPlan.css\";\r\nimport { useEffect } from 'react';\r\n\r\n\r\n\r\n\r\nexport default function DisplayPlan() {\r\n\r\n  const d = new Date()\r\n  const [year, setYear] = useState(d.getFullYear())\r\n  const [month, setMonth] = useState(d.toLocaleString('en-US', { month: 'long', lang: \"eng\" }))\r\n  const [day, setDate] = useState(d.getDate())\r\n  const [monthWeekDays, changeMonthWeekDays] = useState([])\r\n  const [rowsNum, changeRowsNum] = useState(1)\r\n  const [table, changeTable] = useState()\r\n\r\n\r\n  const createTable = (rows) => {\r\n    const arr = [...Array(rows-1).keys()]\r\n    console.log(arr)\r\n    const Table = (\r\n        arr.map((index) => {\r\n          <tr><td>index</td></tr>\r\n        })\r\n    )\r\n    return Table\r\n  }\r\n\r\n  useEffect(()=>{\r\n    var numOfRows = 1\r\n    var lastDay = new Date(year, d.getMonth()+1, 0).getDate()\r\n    for(var i = 1; i<= lastDay; i++){\r\n      const w = new Date(year, d.getMonth(), i)\r\n      console.log(w.getDay())\r\n      if(w.getDay()===0)\r\n      {\r\n        numOfRows = numOfRows+1\r\n      } \r\n      changeRowsNum(numOfRows)   \r\n    }\r\n    changeTable(createTable(numOfRows))\r\n    \r\n\r\n  }, [])\r\n  \r\n // Stwórz dynamicznie tabele\r\n  // const arr = new Array(rowsNum)\r\n  // const Table = (\r\n  //   arr.map((index) => {\r\n  //     <tr><td>index</td></tr>\r\n  //   })\r\n\r\n  // )\r\n\r\n\r\n  return (\r\n\r\n    <div className='DisplayPlan'>\r\n         <div className='panel'>\r\n          <div className='monthTitle'>{month[0].toUpperCase() + month.slice(1,) + \" \" + year}</div>\r\n          <div className='monthCallendar'>\r\n          {rowsNum}\r\n          </div>\r\n         </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}