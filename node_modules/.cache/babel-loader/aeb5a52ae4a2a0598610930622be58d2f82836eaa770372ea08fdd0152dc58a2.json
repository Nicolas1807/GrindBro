{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mikic\\\\Desktop\\\\GrindBro\\\\frontend\\\\src\\\\Context\\\\schedules.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SchedulesContext = /*#__PURE__*/createContext();\nfunction Provider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  // GLOBAL STATES\n  const [schedules, changeSchedules] = useState([{\n    id: 1,\n    start: \"7:00\",\n    end: \"9:00\",\n    activities: [\"jogging\", \"swimming\"]\n  }, {\n    id: 2,\n    start: \"9:00\",\n    end: \"10:00\",\n    activities: [\"breakfast\"]\n  }]);\n  const [errorTitle, changeTitle] = useState(\"Daily Reminder\");\n  const [errorDesc, changeDesc] = useState(\"Remember to schedule your daily tasks with appropriate timespans. You can't do two task at a time.\");\n  const [notifyVisible, changeNotifyVisible] = useState(true);\n  const [showWidget, changeShowWidget] = useState(false);\n\n  //ADDING SCHEDULE BLOCK FUNCTION\n  const onAddSchedule = () => {\n    var idNumberFound = false;\n    while (!idNumberFound) {\n      var newId = Math.round(Math.random() * 9999);\n      idNumberFound = true;\n      const ids = schedules.map(schedule => {\n        return schedule.id;\n      });\n      if (ids.includes(newId)) {\n        idNumberFound = false;\n      }\n    }\n    changeSchedules([...schedules, {\n      id: newId,\n      start: \"10:00\",\n      end: \"12:00\",\n      activities: []\n    }]);\n  };\n\n  //UPDATING TIMESPAN OF A SCHEDULE FUNCTION\n  const scheduleTimespan = (idUpdate, start, end) => {\n    const updatedSchedules = schedules.map(schedule => {\n      if (schedule.id === idUpdate) return {\n        ...schedule,\n        start: start,\n        end: end\n      };\n      return schedule;\n    });\n    changeSchedules(updatedSchedules);\n  };\n\n  //CHANGING ACTIVITIES IN A SCHEDULE FUNCTION\n  const changeActivities = (idschedule, activities) => {\n    const updatedSchedules = schedules.map(schedule => {\n      if (schedule.id === idschedule) {\n        return {\n          ...schedule,\n          activities: activities\n        };\n      }\n      return schedule;\n    });\n    changeSchedules(updatedSchedules);\n  };\n\n  //DELETING SCHEDULE BLOCK BY ID FUNCTION\n  const deleteBlock = idDelete => {\n    const updatedSchedules = schedules.filter(schedule => {\n      return schedule.id !== idDelete;\n    });\n    changeSchedules(updatedSchedules);\n  };\n\n  //CHANGE ORDER OF SCHEDULESBLOCKS IN SCHEDULESBLOCK LIST FUNCTION\n  const changeOrder = (idOrder, isDown) => {\n    var updatedSchedules = [];\n    var index = 0;\n    for (var i = 0; i < schedules.length; i++) {\n      if (schedules[i].id === idOrder) {\n        index = i;\n        if (isDown) {\n          if (index >= schedules.length - 1) {\n            return 0;\n          }\n          updatedSchedules.push(schedules[i + 1]);\n        } else {\n          if (index <= 0) {\n            return 0;\n          }\n          updatedSchedules.push(schedules[i - 1]);\n        }\n      } else {\n        updatedSchedules.push(schedules[i]);\n      }\n    }\n    if (isDown) {\n      updatedSchedules[index + 1] = schedules[index];\n    } else {\n      updatedSchedules[index - 1] = schedules[index];\n    }\n    changeSchedules(updatedSchedules);\n  };\n  const scheduleData = {\n    onAddSchedule,\n    scheduleTimespan,\n    changeActivities,\n    deleteBlock,\n    changeOrder\n  };\n  return /*#__PURE__*/_jsxDEV(SchedulesContext.Provider, {\n    value: scheduleData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(Provider, \"l35pxEvR0Z7HDnBVEiovRXFQYgc=\");\n_c = Provider;\nexport { Provider };\nexport default SchedulesContext;\nvar _c;\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["createContext","useState","React","jsxDEV","_jsxDEV","SchedulesContext","Provider","_ref","_s","children","schedules","changeSchedules","id","start","end","activities","errorTitle","changeTitle","errorDesc","changeDesc","notifyVisible","changeNotifyVisible","showWidget","changeShowWidget","onAddSchedule","idNumberFound","newId","Math","round","random","ids","map","schedule","includes","scheduleTimespan","idUpdate","updatedSchedules","changeActivities","idschedule","deleteBlock","idDelete","filter","changeOrder","idOrder","isDown","index","i","length","push","scheduleData","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mikic/Desktop/GrindBro/frontend/src/Context/schedules.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport React from 'react';\r\n\r\nconst SchedulesContext = createContext();\r\n\r\nfunction Provider({children}) {\r\n    // GLOBAL STATES\r\n    const[schedules, changeSchedules] = useState([{id:1, start:\"7:00\", end:\"9:00\", activities:[\"jogging\", \"swimming\"]}, {id:2, start:\"9:00\", end:\"10:00\", activities:[\"breakfast\",]}])\r\n    const [errorTitle, changeTitle] = useState(\"Daily Reminder\")\r\n    const [errorDesc, changeDesc] = useState(\"Remember to schedule your daily tasks with appropriate timespans. You can't do two task at a time.\")\r\n    const [notifyVisible, changeNotifyVisible] = useState(true)\r\n    const [showWidget, changeShowWidget] = useState(false)\r\n    \r\n\r\n    //ADDING SCHEDULE BLOCK FUNCTION\r\n    const onAddSchedule = () => {\r\n        var idNumberFound = false\r\n        while(!idNumberFound)\r\n        {\r\n        var newId = Math.round(Math.random()*9999)\r\n        idNumberFound = true\r\n        const ids = schedules.map((schedule) => {return schedule.id})\r\n        if(ids.includes(newId))\r\n        {\r\n            idNumberFound = false\r\n        }\r\n        \r\n        }\r\n        changeSchedules([...schedules, {id:newId, start:\"10:00\", end:\"12:00\", activities:[]}])\r\n    }\r\n\r\n\r\n    //UPDATING TIMESPAN OF A SCHEDULE FUNCTION\r\n    const scheduleTimespan = (idUpdate, start, end) => {\r\n        const updatedSchedules = schedules.map((schedule) => {\r\n        if (schedule.id === idUpdate)\r\n            return {...schedule, start:start, end:end}\r\n        return schedule\r\n        })\r\n        changeSchedules(updatedSchedules)\r\n    }\r\n\r\n\r\n    //CHANGING ACTIVITIES IN A SCHEDULE FUNCTION\r\n    const changeActivities = (idschedule, activities) => {\r\n        const updatedSchedules = schedules.map((schedule) => {\r\n            if(schedule.id === idschedule)\r\n            {\r\n            return {...schedule, activities:activities}\r\n            }\r\n            return schedule\r\n        })\r\n        changeSchedules(updatedSchedules)\r\n    }\r\n\r\n\r\n    //DELETING SCHEDULE BLOCK BY ID FUNCTION\r\n    const deleteBlock = (idDelete) => {\r\n        const updatedSchedules = schedules.filter((schedule)=>{return schedule.id !== idDelete})\r\n        changeSchedules(updatedSchedules)\r\n    }\r\n\r\n    //CHANGE ORDER OF SCHEDULESBLOCKS IN SCHEDULESBLOCK LIST FUNCTION\r\n    const changeOrder = (idOrder, isDown) => {\r\n        var updatedSchedules = []\r\n        var index = 0\r\n        for(var i = 0; i< schedules.length; i++){\r\n          if (schedules[i].id === idOrder)\r\n          {\r\n            index = i\r\n            if (isDown)\r\n            {\r\n              if(index >= schedules.length - 1)\r\n              {\r\n                return 0\r\n              }\r\n              updatedSchedules.push(schedules[i+1])\r\n            }\r\n            else\r\n            {\r\n              if(index <= 0)\r\n              {\r\n                return 0\r\n              }\r\n              updatedSchedules.push(schedules[i-1])\r\n            }\r\n          }\r\n          else\r\n          {\r\n            updatedSchedules.push(schedules[i])\r\n          }\r\n        }\r\n        if (isDown)\r\n        {\r\n          updatedSchedules[index+1] = schedules[index]\r\n        }\r\n        else\r\n        {\r\n          updatedSchedules[index-1] = schedules[index]\r\n        }\r\n        changeSchedules(updatedSchedules)\r\n      }\r\n\r\n  const scheduleData = {\r\n    onAddSchedule,\r\n    scheduleTimespan,\r\n    changeActivities,\r\n    deleteBlock,\r\n    changeOrder\r\n  }\r\n\r\n  return (\r\n    <SchedulesContext.Provider value = {scheduleData}/>\r\n  )\r\n}\r\n\r\nexport {Provider};\r\nexport default SchedulesContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}